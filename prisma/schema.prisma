// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String?
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  books        Book[]
  favorites    FavoriteBook[]
  LoggedInUser LoggedInUser?
}

model LoggedInUser {
  id      String  @id @default(uuid())
  verifie Boolean
  token   String
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id])
}

model Genre {
  id        String   @id @default(cuid())
  name      String   @unique
  books     Book[] // One-to-many relation: a genre can have many books
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          String         @id @default(cuid())
  title       String
  author      String
  coverImage  String
  publishedAt DateTime
  genre       Genre?         @relation(fields: [genreName], references: [name])
  genreName   String? // Foreign key for Genre
  user        User           @relation(fields: [userId], references: [id])
  userId      String // Foreign key for User
  favorites   FavoriteBook[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model FavoriteBook {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Foreign key for User
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String // Foreign key for Book
  createdAt DateTime @default(now())
}
