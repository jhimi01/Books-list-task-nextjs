// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?   // Add this line
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  books         Book[]
  favorites     FavoriteBook[]
  accounts      Account[]
  sessions      Session[]
}


model Genre {
  id        String   @id @default(cuid())
  name      String   @unique
  books     Book[]   // One-to-many relation: a genre can have many books
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          String         @id @default(cuid())
  title       String
  author      String
  coverImage  String
  publishedAt DateTime
  genre       Genre?         @relation(fields: [genreName], references: [name])
  genreName   String? // Foreign key for Genre
  user        User           @relation(fields: [userId], references: [id])
  userId      String // Foreign key for User
  favorites   FavoriteBook[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model FavoriteBook {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Foreign key for User
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String // Foreign key for Book
  createdAt DateTime @default(now())
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String
  access_token       String?  // Optional fields
  refresh_token      String?
  expires_at         Int?
  scope              String?
  token_type         String?
  id_token           String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
